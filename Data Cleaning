-- Create a staging table to work with the data without modifying the original
SELECT *
FROM layoffs;

CREATE TABLE layoffs_staging LIKE layoffs;

SELECT *
FROM layoffs_staging;

INSERT INTO layoffs_staging
SELECT *
FROM layoffs;

-- Identify and remove duplicate rows
-- We'll use a CTE (Common Table Expression) to assign row numbers
-- based on all columns to find exact duplicates.
WITH cte_duplicates AS (
    SELECT
        *,
        ROW_NUMBER() OVER (
            PARTITION BY
                company,
                location,
                industry,
                total_laid_off,
                percentage_laid_off,
                `date`,
                stage,
                country,
                funds_raised_millions
        ) AS row_num
    FROM
        layoffs_staging
)
SELECT
    *
FROM
    cte_duplicates
WHERE
    row_num > 1;

-- Verify duplicates for a specific company (e.g., 'Casper')
SELECT
    *
FROM
    layoffs_staging
WHERE
    company = 'Casper';

-- Create a second staging table (layoffs_staging2) to store the data
-- including the row_num, which will be used for deletion.
CREATE TABLE `layoffs_staging2` (
    `company` TEXT,
    `location` TEXT,
    `industry` TEXT,
    `total_laid_off` INT DEFAULT NULL,
    `percentage_laid_off` TEXT,
    `date` TEXT,
    `stage` TEXT,
    `country` TEXT,
    `funds_raised_millions` INT DEFAULT NULL,
    `row_num` INT
) ENGINE = InnoDB DEFAULT CHARSET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci;

SELECT *
FROM layoffs_staging2;

-- Insert data into layoffs_staging2, calculating row numbers
INSERT INTO layoffs_staging2
SELECT
    *,
    ROW_NUMBER() OVER (
        PARTITION BY
            company,
            location,
            industry,
            total_laid_off,
            percentage_laid_off,
            `date`,
            stage,
            country,
            funds_raised_millions
    ) AS row_num
FROM
    layoffs_staging;

-- Delete duplicate rows from layoffs_staging2
DELETE FROM
    layoffs_staging2
WHERE
    row_num > 1;

SELECT *
FROM layoffs_staging2;

-- ## Standardizing Data

-- Trim whitespace from the 'company' column
UPDATE
    layoffs_staging2
SET
    company = TRIM(company);

-- Check distinct values in 'industry'
SELECT DISTINCT
    industry
FROM
    layoffs_staging2
ORDER BY
    1;

-- Standardize 'Crypto' industry values
SELECT
    industry
FROM
    layoffs_staging2
WHERE
    industry LIKE 'Crypto%';

UPDATE
    layoffs_staging2
SET
    industry = 'Crypto'
WHERE
    industry LIKE 'Crypto%';

-- Check distinct values in 'country'
SELECT DISTINCT
    country
FROM
    layoffs_staging2
ORDER BY
    1;

-- Identify and trim trailing periods from 'country' names (e.g., 'United States.')
SELECT DISTINCT
    country,
    TRIM(TRAILING '.' FROM country)
FROM
    layoffs_staging2
ORDER BY
    1;

UPDATE
    layoffs_staging2
SET
    country = TRIM(TRAILING '.' FROM country)
WHERE
    country LIKE 'United States%';

-- Convert 'date' column from text to date format
SELECT
    `date`,
    STR_TO_DATE(`date`, '%m/%d/%Y')
FROM
    layoffs_staging2;

UPDATE
    layoffs_staging2
SET
    `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

ALTER TABLE
    layoffs_staging2
MODIFY COLUMN
    `date` DATE;

-- Handle NULL or empty strings in 'industry'
SELECT
    *
FROM
    layoffs_staging2
WHERE
    industry IS NULL OR industry = '';

UPDATE
    layoffs_staging2
SET
    industry = NULL
WHERE
    industry = '';

-- Populate missing 'industry' values by joining on 'company'
-- If a company has a non-null industry in another row, use that.
SELECT
    *
FROM
    layoffs_staging2 AS t1
JOIN
    layoffs_staging2 AS t2 ON t1.company = t2.company
WHERE
    t1.industry IS NULL AND t2.industry IS NOT NULL;


UPDATE
    layoffs_staging2 AS t1
JOIN
    layoffs_staging2 AS t2 ON t1.company = t2.company
SET
    t1.industry = t2.industry
WHERE
    t1.industry IS NULL AND t2.industry IS NOT NULL;

-- Verify a specific company after industry imputation
SELECT
    *
FROM
    layoffs_staging2
WHERE
    company = 'Bally''s Interactive';

-- Identify rows where both 'total_laid_off' and 'percentage_laid_off' are NULL
-- These rows might be difficult to analyze and could be candidates for removal.
SELECT
    *
FROM
    layoffs_staging2
WHERE
    total_laid_off IS NULL AND percentage_laid_off IS NULL;

SELECT *
FROM layoffs_staging2;

-- Remove the 'row_num' column as it's no longer needed
ALTER TABLE
    layoffs_staging2
DROP COLUMN
    row_num;
